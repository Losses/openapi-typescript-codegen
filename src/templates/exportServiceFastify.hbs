{{>header}}

import type { FastifyInstance, FastifyRequest, FastifyReply } from 'fastify';

{{#if throwOnRequestFailed}}
import { ApiError } from '../core/ApiError';
{{/if}}

{{#if imports}}
{{#each imports}}
import type { {{{this}}} } from '../models/{{{this}}}';
{{/each}}
{{/if}}

{{#each operations}}

export type {{{name}}}OkResult =
{{#each okResults}}
  | {{>type this}}
{{else}}
  | void
{{/each}};

export type {{{name}}}ErrorResult =
{{#each errorResults}}
  | {{>type this}}
{{else}}
  | void
{{/each}};

{{/each}};


{{#each operations}}

export interface {{name}}FastifyRouteGeneric {
    Body: 
    {{#if parametersBody}}
    {{>type parametersBody}}
    {{else}}
    null
    {{/if}}
    ;
    Querystring: {
        {{#each parametersQuery}}
        {{{name}}}: string;
        {{/each}}
    };
    Params: {
        {{#each pathParameters}}
        {{{this}}}: string;
        {{/each}}
    };
    Headers: {
        {{#each headers}}
        {{{this}}}: string;
        {{/each}}
    }
}

export const {{{name}}}Router = (
    fastify: FastifyInstance,
    callback: (
        request: FastifyRequest<{{name}}FastifyRouteGeneric>, 
        reply: FastifyReply
    ) => void | Promise<{{{name}}}OkResult | {{{name}}}ErrorResult>
) => {
    fastify.{{{toLowerCase method}}}('{{{pathPattern}}}', callback);
}

{{/each}}
