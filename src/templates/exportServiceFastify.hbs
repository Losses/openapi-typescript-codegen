{{>header}}

import type {
    FastifyInstance,
    FastifyRequest,
    FastifyReply,
    RouteOptions,
    RawServerDefault,
    RawRequestDefaultExpression,
    RawReplyDefaultExpression,
    ContextConfigDefault
} from 'fastify';

{{#if throwOnRequestFailed}}
import { ApiError } from '../core/ApiError';
{{/if}}

{{#if imports}}
{{#each imports}}
import type { {{{this}}} } from '../models/{{{this}}}';
{{/each}}
{{/if}}

{{#each operations}}

export type {{{name}}}OkResult =
{{#each okResults}}
  | {{>type this}}
{{else}}
  | void
{{/each}};

export type {{{name}}}ErrorResult =
{{#each errorResults}}
  | {{>type this}}
{{else}}
  | void
{{/each}};

{{/each}};


{{#each operations}}

interface BlockedOption {
    method: never;
    url: never;
    handler: never;
}

export interface {{name}}FastifyRouteGeneric {
    Body:
    {{#if parametersBody}}
    {{>type parametersBody}}
    {{else}}
    null
    {{/if}}
    ;
    Querystring: {
        {{#each parametersQuery}}
        {{{name}}}: string;
        {{/each}}
    };
    Params: {
        {{#each pathParameters}}
        {{{this}}}: string;
        {{/each}}
    };
    Headers: {
        {{#each headers}}
        {{{this}}}: string;
        {{/each}}
    };
    Reply: {{{name}}}OkResult | {{{name}}}ErrorResult;
}

export const {{{name}}}Router = (
    fastify: FastifyInstance,
    callback: (
        request: FastifyRequest<{{name}}FastifyRouteGeneric>,
        reply: FastifyReply<
            RawServerDefault,
            RawRequestDefaultExpression,
            RawReplyDefaultExpression,
            {{name}}FastifyRouteGeneric
        >,
    ) => void | Promise<{{{name}}}OkResult | {{{name}}}ErrorResult>,
    options?: Omit<
        RouteOptions<
            RawServerDefault,
            RawRequestDefaultExpression,
            RawReplyDefaultExpression,
            {{name}}FastifyRouteGeneric,
            ContextConfigDefault
        >, keyof BlockedOption
    > & BlockedOption
) => {
    return fastify.route({
        method: '{{{method}}}',
        url: '{{{pathPattern}}}',
        handler: callback,
        ...options,
    });
}

{{/each}}
