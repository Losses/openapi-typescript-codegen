{{>header}}

{{#if runtimeValidation}}
import type { ValidateFunction } from 'ajv';
// @ts-ignore
import { default as betterAjvErrors } from 'better-ajv-errors/lib/modern';
{{/if}}

import { ApiError } from './ApiError';
import type { BaseApiRequestOptions, ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';
import { OpenAPI } from './OpenAPI';

{{#equals variation 'react-hook'}}
export * from './requestReactHook';
{{/equals}}

{{>functions/isDefined}}


{{>functions/isString}}


{{>functions/isStringWithValue}}


{{>functions/isBlob}}


{{>functions/getQueryString}}


{{>functions/getUrl}}


{{>functions/getFormData}}


{{>functions/resolve}}


{{>fetch/getHeaders}}


{{>fetch/getRequestBody}}


{{>fetch/sendRequest}}


{{>fetch/getResponseHeader}}


{{>fetch/getResponseBody}}


{{>functions/catchErrors}}

{{#if runtimeValidation}}
{{>functions/validateResponse}}
{{/if}}


const poorClone = <T>(x: T) => JSON.parse(JSON.stringify(x)) as T;

/**
 * Request using fetch client
 * @param options The request options from the the service
 * @returns ApiResult
 * @throws ApiError
 */
export async function request<DataType, ErrorType>(
    options: ApiRequestOptions,
    globalOptions: BaseApiRequestOptions
): Promise<ApiResult<DataType, true> | ApiResult<ErrorType | null, false>> {
    const mergedOptions = {} as unknown as ApiRequestOptions;
    Object.assign(mergedOptions, poorClone(globalOptions));
    Object.assign(mergedOptions, poorClone(options));

    const url = getUrl(mergedOptions);
    const response = await sendRequest(mergedOptions, url);
    const responseBody = await getResponseBody(response);
    const responseHeader = getResponseHeader(response, mergedOptions.responseHeader);

    let responseValid = true;
    {{#if runtimeValidation}}
    if (mergedOptions.schemas) {
        responseValid = validateResponse(url, responseBody, response.statusText, mergedOptions.schemas);
    }
    {{/if}}

    if (!responseValid) {
        return {
            url,
            ok: false,
            status: -1,
            statusText: 'Client side validation failed',
            body: null,
        }
    }

    return {
        url,
        ok: response.ok,
        status: response.status,
        statusText: response.statusText,
        body: responseHeader || responseBody,
    };
}
