{{>header}}

{{#if runtimeValidation}}
import type { ValidateFunction } from 'ajv';
// @ts-ignore
import { default as betterAjvErrors } from 'better-ajv-errors/lib/modern';
{{/if}}

import { ApiError } from './ApiError';
import type { BaseApiRequestOptions, ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';
import { OpenAPI } from './OpenAPI';

import merge from 'lodash.merge';
import { atom, useAtom, SetStateAction } from 'jotai';

export const globalOptionsAtom = atom<BaseApiRequestOptions>({});

{{>functions/isDefined}}


{{>functions/isString}}


{{>functions/isStringWithValue}}


{{>functions/isBlob}}


{{>functions/getQueryString}}


{{>functions/getUrl}}


{{>functions/getFormData}}


{{>functions/resolve}}


{{>fetch/getHeaders}}


{{>fetch/getRequestBody}}


{{>fetch/sendRequest}}


{{>fetch/getResponseHeader}}


{{>fetch/getResponseBody}}


{{>functions/catchErrors}}

{{#if runtimeValidation}}
{{>functions/validateResponse}}
{{/if}}


/**
 * Request using fetch client
 * @param options The request options from the the service
 * @returns ApiResult
 * @throws ApiError
 */
export async function request(options: ApiRequestOptions): Promise<ApiResult> {
    const [globalOptions] = useAtom(globalOptionsAtom);
    const mergedOptions = merge({}, [globalOptions, options]) as unknown as ApiRequestOptions;
    const url = getUrl(mergedOptions);
    const response = await sendRequest(mergedOptions, url);
    const responseBody = await getResponseBody(response);
    const responseHeader = getResponseHeader(response, mergedOptions.responseHeader);

    {{#if runtimeValidation}}
    if (mergedOptions.schemas) {
        validateResponse(url, responseBody, response.statusText, mergedOptions.schemas);
    }
    {{/if}}

    const result: ApiResult = {
        url,
        ok: response.ok,
        status: response.status,
        statusText: response.statusText,
        body: responseHeader || responseBody,
    };

    catchErrors(mergedOptions, result);
    return result;
}

export interface ILoadingState<DataType = void, ErrorType = void> {
    loading: true;
    error: ErrorType | null;
    data: DataType | null;
}

export interface ISuccessState<DataType = void> {
    loading: false;
    error: null;
    data: DataType;
}

export interface IFailedState<ErrorType = void> {
    loading: false;
    error: ErrorType;
    data: null
}

export type ResultState<DataType = void, ErrorType = void> =
    | ILoadingState<DataType, ErrorType>
    | ISuccessState<DataType>
    | IFailedState<ErrorType>

export interface IActionCallback<DataType = void, ErrorType = void> {
    (
        atom: ResultState<DataType, ErrorType>,
        set: (update: SetStateAction<ResultState<DataType, ErrorType>>) => void,
        result: ApiResult
    ): void;
}
