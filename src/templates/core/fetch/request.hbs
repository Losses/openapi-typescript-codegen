{{>header}}

{{#if runtimeValidation}}
import type { ValidateFunction } from 'ajv';
// @ts-ignore
import { default as betterAjvErrors } from 'better-ajv-errors/lib/modern';
{{/if}}

import { ApiError } from './ApiError';
import type { BaseApiRequestOptions, ApiRequestOptions } from './ApiRequestOptions';
import type { ApiResult } from './ApiResult';
import { OpenAPI } from './OpenAPI';

import { atom, useAtom, SetStateAction } from 'jotai';

export const globalOptionsAtom = atom<BaseApiRequestOptions>({});

{{>functions/isDefined}}


{{>functions/isString}}


{{>functions/isStringWithValue}}


{{>functions/isBlob}}


{{>functions/getQueryString}}


{{>functions/getUrl}}


{{>functions/getFormData}}


{{>functions/resolve}}


{{>fetch/getHeaders}}


{{>fetch/getRequestBody}}


{{>fetch/sendRequest}}


{{>fetch/getResponseHeader}}


{{>fetch/getResponseBody}}


{{>functions/catchErrors}}

{{#if runtimeValidation}}
{{>functions/validateResponse}}
{{/if}}


const poorClone = <T>(x: T) => JSON.parse(JSON.stringify(x)) as T;

/**
 * Request using fetch client
 * @param options The request options from the the service
 * @returns ApiResult
 * @throws ApiError
 */
export async function request<DataType, ErrorType>(
    options: ApiRequestOptions,
    globalOptions: BaseApiRequestOptions
): Promise<ApiResult<DataType, true> | ApiResult<ErrorType | null, false>> {
    const mergedOptions = {} as unknown as ApiRequestOptions;
    Object.assign(mergedOptions, poorClone(globalOptions));
    Object.assign(mergedOptions, poorClone(options));

    const url = getUrl(mergedOptions);
    const response = await sendRequest(mergedOptions, url);
    const responseBody = await getResponseBody(response);
    const responseHeader = getResponseHeader(response, mergedOptions.responseHeader);

    let responseValid = true;
    {{#if runtimeValidation}}
    if (mergedOptions.schemas) {
        responseValid = validateResponse(url, responseBody, response.statusText, mergedOptions.schemas);
    }
    {{/if}}

    if (!responseValid) {
        return {
            url,
            ok: false,
            status: -1,
            statusText: 'Client side validation failed',
            body: null,
        }
    }

    return {
        url,
        ok: response.ok,
        status: response.status,
        statusText: response.statusText,
        body: responseHeader || responseBody,
    };
}

export enum RequestStatus {
    NotReady = 'NotReady',
    Loading = 'Loading',
    Success = 'Success',
    Error = 'Error',
}

export interface INotReadyState<DataType = void, ErrorType = void> {
    status: RequestStatus.NotReady;
    error: ErrorType | null;
    data: DataType | null;
}

export interface ILoadingState<DataType = void, ErrorType = void> {
    status: RequestStatus.Loading;
    error: ErrorType | null;
    data: DataType | null;
}

export interface ISuccessState<DataType = void> {
    status: RequestStatus.Success;
    error: null;
    data: DataType;
}

export interface IFailedState<ErrorType = void> {
    status: RequestStatus.Error;
    error: ErrorType | null;
    data: null
}

export type ResultState<DataType = void, ErrorType = void> =
    | INotReadyState<DataType, ErrorType>
    | ILoadingState<DataType, ErrorType>
    | ISuccessState<DataType>
    | IFailedState<ErrorType>

export interface IActionCallback<DataType = void, ErrorType = void> {
    (
        atom: ResultState<DataType, ErrorType>,
        set: (update: SetStateAction<ResultState<DataType, ErrorType>>) => void,
        result: ApiResult
    ): void;
}
