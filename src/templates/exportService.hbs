{{>header}}
import { useCallback, useMemo } from 'react';
import { atom, useAtom, SetStateAction } from 'jotai';

{{#if throwOnRequestFailed}}
import { ApiError } from '../core/ApiError';
{{/if}}

{{#if runtimeValidation}}
import Ajv from "ajv";
import addFormats from "ajv-formats";
{{/if}}

{{#if imports}}
{{#each imports}}
import type { {{{this}}} } from '../models/{{{this}}}';
{{/each}}

{{#if runtimeValidation}}
{{#if precompileValidator}}
{{#each imports}}
import { $${{{this}}} } from '../validators/$${{{this}}}';
{{/each}}
{{else}}
{{#each imports}}
import { ${{{this}}} } from '../schemas/${{{this}}}';
{{/each}}
{{/if}}
{{/if}}
{{/if}}

import { RequestStatus, globalOptionsAtom, request as __request } from '../core/request';
import type { ResultState, IActionCallback } from '../core/request';
import { BaseApiRequestOptions, ApiRequestOptions } from '../core/ApiRequestOptions';
import { ApiResult } from '../core/ApiResult';
{{#if @root.useVersion}}
import { OpenAPI } from '../core/OpenAPI';
{{/if}}

{{#if runtimeValidation}}
const ajv = new Ajv();
addFormats(ajv, { mode: "fast" });
{{/if}}

{{#if runtimeValidation}}
{{#if imports}}
{{#unless precompileValidator}}
{{#each imports}}
const $${{{this}}} = ajv.compile(${{{this}}});
{{/each}}
{{/unless}}
{{/if}}
{{/if}}

{{#each operations}}

export type {{{name}}}OkResult =
{{#each okResults}}
  | {{{base}}}
{{else}}
  | void
{{/each}};

export type {{{name}}}ErrorResult =
{{#each errorResults}}
  | {{{base}}}
{{else}}
  | void
{{/each}};

{{/each}};


{{#each operations}}

export const {{{name}}}ResultAtom = atom<
    ResultState<
        {{{name}}}OkResult,
        {{{name}}}ErrorResult
    >
>({ status: RequestStatus.NotReady, error: null, data: null });

export function {{{hookName}}}() {
    const [resultState, setter] = useAtom({{{name}}}ResultAtom);
    const [globalOptions] = useAtom(globalOptionsAtom);

    const fetchData = useCallback(async ({{>parameters}}
        options?: BaseApiRequestOptions,
        cb?: IActionCallback<
            {{{name}}}OkResult,
            {{{name}}}ErrorResult
        >
    ):Promise<
        ApiResult<{{{name}}}OkResult, true>
        {{#unless ../throwOnRequestFailed}}
        | ApiResult<{{{name}}}ErrorResult | null, false>
        {{/unless}}
    > => {
        return new Promise(async (resolve, reject) => {
            setter((resultState) => ({
                error: resultState.error,
                data: resultState.data,
                status: RequestStatus.Loading
            }));

            try {
                const fetchResponse = await __request<
                    {{{name}}}OkResult,
                    {{{name}}}ErrorResult | null
                >({
                    {{#if parametersCookie}}
                    cookies: {
                        {{#each parametersCookie}}
                        '{{{prop}}}': {{{name}}},
                        {{/each}}
                    },
                    {{/if}}
                    {{#if parametersHeader}}
                    headers: {
                        {{#each parametersHeader}}
                        '{{{prop}}}': {{{name}}},
                        {{/each}}
                    },
                    {{/if}}
                    {{#if parametersQuery}}
                    query: {
                        {{#each parametersQuery}}
                        '{{{prop}}}': {{{name}}},
                        {{/each}}
                    },
                    {{/if}}
                    {{#if parametersForm}}
                    formData: {
                        {{#each parametersForm}}
                        '{{{prop}}}': {{{name}}},
                        {{/each}}
                    },
                    {{/if}}
                    {{#if parametersBody}}
                    body: {{{parametersBody.name}}},
                    {{#if parametersBody.mediaType}}
                    mediaType: '{{{parametersBody.mediaType}}}',
                    {{/if}}
                    {{/if}}
                    {{#if responseHeader}}
                    responseHeader: '{{{responseHeader}}}',
                    {{/if}}
                    {{#if errors}}
                    errors: {
                        {{#each errors}}
                        {{{code}}}: `{{{description}}}`,
                        {{/each}}
                    },
                    {{/if}}
                    schemas: {
                        {{#if ../runtimeValidation}}
                        {{#each results}}
                        {{#unless isAny}}
                        {{#notEquals type 'any'}}
                        {{#notEquals type 'void'}}
                        {{#if isDefault}}
                        'default': $${{{type}}},
                        {{else}}
                        '{{{code}}}': $${{{type}}},
                        {{/if}}
                        {{/notEquals}}
                        {{/notEquals}}
                        {{/unless}}
                        {{/each}}
                        {{/if}}
                    },
                    ...options,
                    method: '{{{method}}}',
                    path: `{{{path}}}`,
                }, globalOptions);

                {{#if ../verboseHttpLog}}
                console.info('[OHC] `{{{name}}}` response:', fetchResponse)
                {{/if}}

                let resultState: ResultState<{{{name}}}OkResult, {{{name}}}ErrorResult>;

                if (fetchResponse.status === -1) {
                    resultState = { status: RequestStatus.Error, error: null, data: null };
                } else if (!fetchResponse.ok) {
                    resultState = { status: RequestStatus.Error, error: fetchResponse.body as {{{name}}}ErrorResult | null, data: null };
                } else {
                    resultState = { status: RequestStatus.Success, error: null, data: fetchResponse.body };
                }

                {{#if ../verboseHttpLog}}
                console.info('[OHC] `{{{name}}}` state:', resultState)
                {{/if}}

                if(cb) {
                    cb.call(null, resultState, setter, fetchResponse);
                } else {
                    setter(resultState);
                }

                {{#if ../throwOnRequestFailed}}
                {{#if ../verboseHttpLog}}
                console.info('[OHC] `{{{name}}}` state compare: resultState.status', resultState.status, 'compared to: ', RequestStatus.Success, 'diff: ', resultState.status === RequestStatus.Success)
                {{/if}}
                if (resultState.status === RequestStatus.Success) {
                    resolve(fetchResponse as ApiResult<{{{name}}}OkResult, true>);
                } else {
                    reject(new ApiError<{{{name}}}ErrorResult | null, false>(
                        fetchResponse as ApiResult<{{{name}}}ErrorResult | null, false>,
                        'Failed to fetch'
                    ));
                }
                {{else}}
                resolve(fetchResponse);
                {{/if}}
            } catch (error) {
                setter({ status: RequestStatus.Error, error: null, data: null });
                {{#if ../throwOnRequestFailed}}
                reject(error);
                {{/if}}
            }
        });
    }, [setter, globalOptions]);

    const reset = useCallback((resetAll: boolean) => {
        setter((resultState) => ({
            error: resetAll ? null : resultState.error,
            data: resetAll ? null : resultState.data,
            status: RequestStatus.NotReady
        }));
    }, [setter]);

    const controller = useMemo(() => ({
        fetchData,
        setter,
        reset,
    }), [fetchData, setter, reset]);

    return [
        resultState,
        controller
    ] as const;
}

{{/each}}
