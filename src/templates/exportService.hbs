{{>header}}

import { atom, useAtom, SetStateAction } from 'jotai';

{{#if runtimeValidation}}
import Ajv from "ajv"
{{/if}}

{{#if imports}}
{{#each imports}}
import type { {{{this}}} } from '../models/{{{this}}}';
{{/each}}

{{#if runtimeValidation}}
{{#each imports}}
import { ${{{this}}} } from '../schemas/${{{this}}}';
{{/each}}
{{/if}}
{{/if}}

import { globalOptionsAtom, request as __request } from '../core/request';
import type { ResultState, IActionCallback } from '../core/request';
import { BaseApiRequestOptions, ApiRequestOptions } from '../core/ApiRequestOptions';
import { ApiResult } from '../core/ApiResult';
{{#if @root.useVersion}}
import { OpenAPI } from '../core/OpenAPI';
{{/if}}

{{#if runtimeValidation}}
const ajv = new Ajv();
{{/if}}

{{#if runtimeValidation}}
{{#if imports}}
{{#each imports}}
const {{{this}}}Validator = ajv.compile(${{{this}}});
{{/each}}
{{/if}}
{{/if}}

{{#each operations}}

type {{{name}}}OkResult = 
{{#each okResults}}
  | {{{base}}}
{{else}}
  | void
{{/each}};

type {{{name}}}ErrorResult = 
{{#each errorResults}}
  | {{{base}}}
{{else}}
  | void
{{/each}};

interface I{{{name}}}Controller {
    fetchData: ({{>parameters}}
        options?: ApiRequestOptions,
        cb?: IActionCallback<
            {{{name}}}OkResult, 
            {{{name}}}ErrorResult
        >,
        setter?: (
            update: SetStateAction<ResultState<
                {{{name}}}OkResult, 
                {{{name}}}ErrorResult
            >>
        ) => void,
    ) => void;
};

export function {{{hookName}}}(): [
    ResultState<
        {{{name}}}OkResult, 
        {{{name}}}ErrorResult
    >, 
    I{{{name}}}Controller
] {
    const {{{name}}}ResultAtom = atom<
        ResultState<
            {{{name}}}OkResult, 
            {{{name}}}ErrorResult
        >
    >({ loading: false, error: null, data: null });
    const [resultState, setter] = useAtom({{{name}}}ResultAtom);
    const fetchData = async ({{>parameters}}
        options?: ApiRequestOptions,
        cb?: IActionCallback<
            {{{name}}}OkResult, 
            {{{name}}}ErrorResult
        >
    ) => {
        setter({ error: resultState.error, data: resultState.data, loading: true });
        try {
            const fetchResponse = await __request({
                {{#if parametersCookie}}
                cookies: {
                    {{#each parametersCookie}}
                    '{{{prop}}}': {{{name}}},
                    {{/each}}
                },
                {{/if}}
                {{#if parametersHeader}}
                headers: {
                    {{#each parametersHeader}}
                    '{{{prop}}}': {{{name}}},
                    {{/each}}
                },
                {{/if}}
                {{#if parametersQuery}}
                query: {
                    {{#each parametersQuery}}
                    '{{{prop}}}': {{{name}}},
                    {{/each}}
                },
                {{/if}}
                {{#if parametersForm}}
                formData: {
                    {{#each parametersForm}}
                    '{{{prop}}}': {{{name}}},
                    {{/each}}
                },
                {{/if}}
                {{#if parametersBody}}
                body: {{{parametersBody.name}}},
                {{#if parametersBody.mediaType}}
                mediaType: '{{{parametersBody.mediaType}}}',
                {{/if}}
                {{/if}}
                {{#if responseHeader}}
                responseHeader: '{{{responseHeader}}}',
                {{/if}}
                {{#if errors}}
                errors: {
                    {{#each errors}}
                    {{{code}}}: `{{{description}}}`,
                    {{/each}}
                },
                {{/if}}
                schemas: {
                    {{#each results}}
                    {{#unless isAny}}
                    {{#if isDefault}}
                    'default': {{{type}}}Validator,
                    {{else}}
                    '{{{code}}}': {{{type}}}Validator,
                    {{/if}}
                    {{/unless}}
                    {{/each}}
                },
                ...options,
                method: '{{{method}}}',
                path: `{{{path}}}`,
            });
            if(cb) {
                cb.call(null, resultState, setter, fetchResponse);
            } else {
                const data = await fetchResponse.body()
                setter({ loading: false, error: null, data });
            }
        } catch (error) {
            setter({ loading: false, error, data: null });
        }
    };
    const controller = {
        fetchData,
        setter,
    };
    return [
        resultState,
        controller
    ];
}

{{/each}}
